{"version":3,"file":"babel.esm.js","sources":["../src/cli/babel.ts"],"sourcesContent":["import path from 'path';\nconst attribute = 'id';\nconst hookId = 'usePrefetch';\nconst importPackage = '@module-federation/data-prefetch/react';\nexport default (babel, options) => {\n    const t = babel.types;\n    let shouldHandle = false;\n    let scope = '';\n    const { name, exposes } = options;\n    if (!exposes) {\n        return {};\n    }\n    const exposesKey = Object.keys(exposes);\n    const processedExposes = exposesKey.map((expose) => ({\n        key: expose.replace('.', ''),\n        value: path.resolve(typeof exposes[expose] === 'string'\n            ?\n                exposes[expose]\n            :\n                exposes[expose].import),\n    }));\n    return {\n        visitor: {\n            ImportDeclaration(nodePath, state) {\n                const source = nodePath.node.source.value;\n                const { specifiers } = nodePath.node;\n                const { filename } = state.file.opts;\n                if (source === importPackage) {\n                    shouldHandle = specifiers.some((specifier) => specifier.imported &&\n                        specifier.imported.name === hookId &&\n                        processedExposes.find((expose) => expose.value === filename && (scope = expose.key)));\n                }\n            },\n            CallExpression(nodePath) {\n                if (shouldHandle &&\n                    t.isIdentifier(nodePath.node.callee, { name: hookId }) &&\n                    nodePath.node.arguments.length > 0) {\n                    const objectExpression = nodePath.node.arguments[0];\n                    if (objectExpression &&\n                        t.isObjectExpression(objectExpression) &&\n                        !objectExpression.properties.find((p) => p.key.name === attribute)) {\n                        objectExpression.properties.push(t.objectProperty(t.identifier(attribute), t.stringLiteral(name + scope)));\n                    }\n                }\n            },\n        },\n    };\n};\n"],"names":[],"mappings":";;AACA,MAAM,SAAS,GAAG,IAAI;AACtB,MAAM,MAAM,GAAG,aAAa;AAC5B,MAAM,aAAa,GAAG,wCAAwC;AAC9D,YAAe,CAAC,KAAK,EAAE,OAAO,KAAK;AACnC,IAAI,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK;AACzB,IAAI,IAAI,YAAY,GAAG,KAAK;AAC5B,IAAI,IAAI,KAAK,GAAG,EAAE;AAClB,IAAI,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,OAAO;AACrC,IAAI,IAAI,CAAC,OAAO,EAAE;AAClB,QAAQ,OAAO,EAAE;AACjB;AACA,IAAI,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;AAC3C,IAAI,MAAM,gBAAgB,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,MAAM;AACzD,QAAQ,GAAG,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;AACpC,QAAQ,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK;AACvD;AACA,gBAAgB,OAAO,CAAC,MAAM;AAC9B;AACA,gBAAgB,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACvC,KAAK,CAAC,CAAC;AACP,IAAI,OAAO;AACX,QAAQ,OAAO,EAAE;AACjB,YAAY,iBAAiB,CAAC,QAAQ,EAAE,KAAK,EAAE;AAC/C,gBAAgB,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK;AACzD,gBAAgB,MAAM,EAAE,UAAU,EAAE,GAAG,QAAQ,CAAC,IAAI;AACpD,gBAAgB,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI;AACpD,gBAAgB,IAAI,MAAM,KAAK,aAAa,EAAE;AAC9C,oBAAoB,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,QAAQ;AACpF,wBAAwB,SAAS,CAAC,QAAQ,CAAC,IAAI,KAAK,MAAM;AAC1D,wBAAwB,gBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,KAAK,KAAK,QAAQ,KAAK,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AAC7G;AACA,aAAa;AACb,YAAY,cAAc,CAAC,QAAQ,EAAE;AACrC,gBAAgB,IAAI,YAAY;AAChC,oBAAoB,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;AAC1E,oBAAoB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACxD,oBAAoB,MAAM,gBAAgB,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACvE,oBAAoB,IAAI,gBAAgB;AACxC,wBAAwB,CAAC,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;AAC9D,wBAAwB,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,SAAS,CAAC,EAAE;AAC5F,wBAAwB,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;AAClI;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL,CAAC;;;;"}